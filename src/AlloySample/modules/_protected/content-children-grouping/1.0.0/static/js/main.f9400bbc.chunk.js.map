{"version":3,"sources":["App.tsx","confirm-dialog.tsx","configurations-list.tsx","edit-configuration-dialog.tsx","data-service.ts","reportWebVitals.ts","index.tsx"],"names":["successTimeoutHandle","ConfirmDialog","open","title","message","onConfirm","onCancel","hasCloseButton","hasOverlay","onClose","footerButtonList","style","onClick","ConfigurationsList","items","onEdit","onDelete","useState","itemToDelete","setItemToDelete","density","THead","TR","TH","TBody","map","x","TD","contentLink","width","containerTypeName","routingEnabled","name","groupLevelConfigurations","join","size","leftIcon","EditConfigurationDialog","onSave","configuration","availableNameGenerators","validationMessage","setContentLink","setContainerTypeName","isRoutingEnabled","setIsRoutingEnabled","generators","setGenerators","useEffect","className","alignment","type","displayError","isOptional","label","maxLength","min","onChange","e","target","value","checked","hasBorder","index","Item","updatedList","onGeneratorValueChange","generator","selected","iconName","isDisabled","splice","onRemoveGenerator","dataService","load","axios","get","then","response","alert","catch","error","console","save","configurations","post","log","App","currentConfiguration","setCurrentConfiguration","isNewConfiguration","setIsNewConfiguration","dialogValidationError","setDialogValidationError","showSaveMessage","setShowSaveMessage","setItems","setAvailableGenerators","defaultDataService","result","clearTimeout","indexOf","itemsCopy","setTimeout","filter","existingConfig","c","Object","assign","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f9400bbc.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { Attention, Button } from \"optimizely-oui\";\r\nimport \"./App.scss\";\r\nimport { ConfigurationsList } from \"./configurations-list\";\r\nimport { GroupConfiguration } from \"./models/Groupconfiguration\";\r\nimport { EditConfigurationDialog } from \"./edit-configuration-dialog\";\r\nimport { dataService as defaultDataService } from \"./data-service\";\r\n\r\ninterface AppProps {\r\n  dataService?: any;\r\n}\r\n\r\nlet successTimeoutHandle: number;\r\n\r\nconst App = ({ dataService }: AppProps) => {\r\n  const [currentConfiguration, setCurrentConfiguration] = useState<GroupConfiguration | null>(null);\r\n  const [isNewConfiguration, setIsNewConfiguration] = useState(false);\r\n  const [dialogValidationError, setDialogValidationError] = useState(\"\");\r\n  const [showSaveMessage, setShowSaveMessage] = useState(false);\r\n\r\n  const [items, setItems] = useState<GroupConfiguration[]>([]);\r\n  const [availableNameGenerators, setAvailableGenerators] = useState<string[]>([]);\r\n\r\n  if (!dataService) {\r\n    dataService = defaultDataService;\r\n  }\r\n\r\n  useEffect(() => {\r\n    dataService.load().then((result: any) => {\r\n      setItems(result.items);\r\n      setAvailableGenerators(result.availableNameGenerators);\r\n    });\r\n\r\n    return () => {\r\n      if (successTimeoutHandle) {\r\n        clearTimeout(successTimeoutHandle);\r\n      }\r\n    };\r\n  }, [dataService]);\r\n\r\n  const onAddConfiguration = () => {\r\n    setDialogValidationError(\"\");\r\n    setIsNewConfiguration(true);\r\n    setCurrentConfiguration({\r\n      contentLink: \"\",\r\n      containerTypeName: \"\",\r\n      routingEnabled: true,\r\n      groupLevelConfigurations: [availableNameGenerators[0]] || []\r\n    });\r\n  };\r\n\r\n  const onDialogSave = (configuration: GroupConfiguration): void => {\r\n    if (!currentConfiguration) {\r\n      return;\r\n    }\r\n\r\n    let updatedList: GroupConfiguration[];\r\n    if (isNewConfiguration) {\r\n      // add new item to array\r\n      let config = items.filter((x) => x.contentLink === configuration.contentLink)[0];\r\n      if (config != null) {\r\n        setDialogValidationError(\"Duplicated configuration container\");\r\n        return;\r\n      }\r\n      updatedList = [...items, configuration];\r\n    } else {\r\n      let existingConfig = items.filter((x) => x.contentLink === configuration.contentLink)[0];\r\n      if (existingConfig) {\r\n        if (existingConfig !== currentConfiguration) {\r\n          setDialogValidationError(\"Duplicated configuration container\");\r\n          return;\r\n        }\r\n      }\r\n      const index = items.indexOf(currentConfiguration);\r\n      updatedList = [...items];\r\n      const c = Object.assign({}, updatedList[index]);\r\n      c.contentLink = configuration.contentLink;\r\n      c.containerTypeName = configuration.containerTypeName;\r\n      c.routingEnabled = configuration.routingEnabled;\r\n      c.groupLevelConfigurations = configuration.groupLevelConfigurations;\r\n      updatedList[index] = c;\r\n    }\r\n\r\n    setItems(updatedList);\r\n    setCurrentConfiguration(null);\r\n    setDialogValidationError(\"\");\r\n  };\r\n\r\n  const onEditConfiguration = (configuration: GroupConfiguration) => {\r\n    setIsNewConfiguration(false);\r\n    setDialogValidationError(\"\");\r\n    setCurrentConfiguration(configuration);\r\n  };\r\n\r\n  const onDeleteConfiguration = (configuration: GroupConfiguration) => {\r\n    const index = items.indexOf(configuration);\r\n    if (index < 0) {\r\n      return;\r\n    }\r\n    const itemsCopy = [...items];\r\n    itemsCopy.splice(index, 1);\r\n    setItems(itemsCopy);\r\n  };\r\n\r\n  const onSaveClick = () => {\r\n    setShowSaveMessage(true);\r\n    // @ts-ignore\r\n    successTimeoutHandle = setTimeout(() => {\r\n      setShowSaveMessage(false);\r\n    }, 3000);\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      {showSaveMessage && <Attention alignment=\"center\">Configuration saved</Attention>}\r\n\r\n      <ConfigurationsList items={items} onEdit={onEditConfiguration} onDelete={onDeleteConfiguration} />\r\n      <br />\r\n      <Button\r\n        className=\"add-configuration-button\"\r\n        style=\"outline\"\r\n        size=\"narrow\"\r\n        leftIcon=\"add\"\r\n        onClick={onAddConfiguration}\r\n      >\r\n        Add configuration\r\n      </Button>\r\n\r\n      <Button style=\"highlight\" size=\"narrow\" leftIcon=\"save\" onClick={onSaveClick}>\r\n        Save\r\n      </Button>\r\n\r\n      {!!currentConfiguration && (\r\n        <EditConfigurationDialog\r\n          configuration={currentConfiguration}\r\n          validationMessage={dialogValidationError}\r\n          onSave={onDialogSave}\r\n          onCancel={() => setCurrentConfiguration(null)}\r\n          availableNameGenerators={availableNameGenerators}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport { Button, DialogNew } from \"optimizely-oui\";\r\n\r\ninterface ConfirmDialogProps {\r\n  open: boolean;\r\n  title?: string;\r\n  message: string;\r\n  onCancel: () => void;\r\n  onConfirm: () => void;\r\n}\r\n\r\nexport const ConfirmDialog = ({ open, title = \"Confirm\", message, onConfirm, onCancel }: ConfirmDialogProps) => {\r\n  if (!open) {\r\n    return <></>;\r\n  }\r\n\r\n  return (\r\n    <DialogNew\r\n      title={title}\r\n      hasCloseButton={true}\r\n      hasOverlay={true}\r\n      onClose={onCancel}\r\n      footerButtonList={[\r\n        <Button style=\"plain\" key={0} onClick={onCancel}>\r\n          Cancel\r\n        </Button>,\r\n        <Button style=\"highlight\" key={1} onClick={onConfirm}>\r\n          Save\r\n        </Button>\r\n      ]}\r\n    >\r\n      <p>{message}</p>\r\n    </DialogNew>\r\n  );\r\n};\r\n","import React, { useState } from \"react\";\r\nimport { Button, Table } from \"optimizely-oui\";\r\n// @ts-ignore\r\nimport Icon from \"react-oui-icons\";\r\nimport { GroupConfiguration } from \"./models/Groupconfiguration\";\r\nimport \"optimizely-oui/dist/styles.css\";\r\nimport { ConfirmDialog } from \"./confirm-dialog\";\r\n\r\ninterface ConfigurationsListProps {\r\n  items: GroupConfiguration[];\r\n  onEdit: (item: GroupConfiguration) => void;\r\n  onDelete: (item: GroupConfiguration) => void;\r\n}\r\n\r\nexport const ConfigurationsList = ({ items, onEdit, onDelete }: ConfigurationsListProps) => {\r\n  const [itemToDelete, setItemToDelete] = useState<GroupConfiguration | null>(null);\r\n\r\n  const onConfigurationDelete = () => {\r\n      if (!itemToDelete) {\r\n          return;\r\n      }\r\n      onDelete(itemToDelete);\r\n      setItemToDelete(null);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Table density=\"loose\">\r\n        <Table.THead>\r\n          <Table.TR>\r\n            <Table.TH>Content Link</Table.TH>\r\n            <Table.TH>Container type</Table.TH>\r\n            <Table.TH>Router enabled</Table.TH>\r\n            <Table.TH>Generator</Table.TH>\r\n            <Table.TH>Delete</Table.TH>\r\n          </Table.TR>\r\n        </Table.THead>\r\n        <Table.TBody>\r\n          {(items || []).map((x) => (\r\n            <Table.TR key={x.contentLink}>\r\n              <Table.TD>{x.contentLink}</Table.TD>\r\n              <Table.TD width=\"20%\">{x.containerTypeName}</Table.TD>\r\n              <Table.TD>{x.routingEnabled && <Icon name=\"check\" />}</Table.TD>\r\n              <Table.TD>{(x.groupLevelConfigurations || []).join(\", \")}</Table.TD>\r\n              <Table.TD>\r\n                <Button style=\"plain\" size=\"narrow\" leftIcon=\"projects\" onClick={() => onEdit(x)}>\r\n                  Edit\r\n                </Button>\r\n                <Button style=\"plain\" size=\"narrow\" leftIcon=\"ban\" onClick={() => setItemToDelete(x)}>\r\n                  Delete\r\n                </Button>\r\n              </Table.TD>\r\n            </Table.TR>\r\n          ))}\r\n        </Table.TBody>\r\n      </Table>\r\n      <ConfirmDialog\r\n        open={!!itemToDelete}\r\n        message={\"Do you want to delete configuration\"}\r\n        onCancel={() => setItemToDelete(null)}\r\n        onConfirm={onConfigurationDelete}\r\n      />\r\n    </>\r\n  );\r\n};\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { GroupConfiguration } from \"./models/Groupconfiguration\";\r\nimport { Attention, BlockList, Button, ButtonIcon, Checkbox, DialogNew, Input, Label, Select } from \"optimizely-oui\";\r\n\r\ninterface EditConfigurationDialogProps {\r\n  onSave: (configuration: GroupConfiguration) => void;\r\n  onCancel: () => void;\r\n  configuration?: GroupConfiguration;\r\n  availableNameGenerators: string[];\r\n  validationMessage: string;\r\n}\r\n\r\nexport const EditConfigurationDialog = ({\r\n  onSave,\r\n  onCancel,\r\n  configuration,\r\n  availableNameGenerators,\r\n  validationMessage\r\n}: EditConfigurationDialogProps) => {\r\n  const [contentLink, setContentLink] = useState(configuration?.contentLink || \"\");\r\n  const [containerTypeName, setContainerTypeName] = useState(configuration?.containerTypeName || \"\");\r\n  const [isRoutingEnabled, setIsRoutingEnabled] = useState(configuration?.routingEnabled || false);\r\n  const [generators, setGenerators] = useState(configuration?.groupLevelConfigurations || []);\r\n\r\n  useEffect(() => {\r\n    setContentLink(configuration?.contentLink || \"\");\r\n    setContainerTypeName(configuration?.containerTypeName || \"\");\r\n    setIsRoutingEnabled(configuration?.routingEnabled || false);\r\n    setGenerators(configuration?.groupLevelConfigurations || []);\r\n  }, [configuration]);\r\n\r\n  const onAddGenerator = () => {\r\n    const updatedList = [...generators, availableNameGenerators[0]];\r\n    setGenerators(updatedList);\r\n  };\r\n\r\n  const onRemoveGenerator = (index: number) => {\r\n    let updatedList = [...generators];\r\n    updatedList.splice(index, 1);\r\n    setGenerators(updatedList);\r\n  };\r\n\r\n  const onGeneratorValueChange = (index: number, value: string) => {\r\n    let updatedList = [...generators];\r\n    updatedList[index] = value;\r\n    setGenerators(updatedList);\r\n  };\r\n\r\n  const onDialogSave = () => {\r\n    onSave({\r\n      contentLink: contentLink,\r\n      containerTypeName: containerTypeName,\r\n      routingEnabled: isRoutingEnabled,\r\n      groupLevelConfigurations: generators\r\n    });\r\n  };\r\n\r\n  return (\r\n    <DialogNew\r\n      title=\"Configuration\"\r\n      className=\"configuration-item\"\r\n      hasCloseButton={true}\r\n      hasOverlay={true}\r\n      onClose={onCancel}\r\n      footerButtonList={[\r\n        <Button style=\"plain\" key={0} onClick={onCancel}>\r\n          Cancel\r\n        </Button>,\r\n        <Button style=\"highlight\" key={1} onClick={onDialogSave}>\r\n          Save\r\n        </Button>\r\n      ]}\r\n    >\r\n      {validationMessage && (\r\n        <Attention alignment=\"center\" type=\"bad-news\">\r\n          {validationMessage}\r\n        </Attention>\r\n      )}\r\n\r\n      <Input\r\n        displayError={false}\r\n        type=\"number\"\r\n        isOptional={false}\r\n        label=\"Container Content link\"\r\n        maxLength={5}\r\n        className=\"content-link\"\r\n        min={1}\r\n        onChange={(e) => setContentLink(e.target.value)}\r\n        value={contentLink}\r\n      />\r\n      <Input\r\n        type=\"text\"\r\n        label=\"Container type name\"\r\n        value={containerTypeName}\r\n        onChange={(e) => setContainerTypeName(e.target.value)}\r\n      />\r\n      <Checkbox\r\n        label=\"Router enabled\"\r\n        checked={isRoutingEnabled}\r\n        onChange={(e) => setIsRoutingEnabled(e.target.value)}\r\n      />\r\n      <Label>Name generators</Label>\r\n      <BlockList hasBorder={false} className=\"configuration-item\">\r\n        {generators.map((x, index) => (\r\n          <BlockList.Item key={x + \"_\" + index}>\r\n            <Select\r\n              className=\"configuration-generator-select\"\r\n              isOptional={false}\r\n              onChange={(value) => onGeneratorValueChange(index, value.target.value)}\r\n            >\r\n              {availableNameGenerators.map((generator) => (\r\n                <option key={generator} value={generator} selected={generator === x}>\r\n                  {generator}\r\n                </option>\r\n              ))}\r\n            </Select>\r\n            {index > 0 && (\r\n              <ButtonIcon\r\n                className=\"remove-button\"\r\n                iconName=\"close\"\r\n                isDisabled={false}\r\n                onClick={() => onRemoveGenerator(index)}\r\n                size=\"small\"\r\n                style=\"outline\"\r\n                title=\"Close Dialog\"\r\n              />\r\n            )}\r\n          </BlockList.Item>\r\n        ))}\r\n      </BlockList>\r\n      <Button style=\"outline\" size=\"narrow\" leftIcon=\"add\" onClick={onAddGenerator}>\r\n        Add generator\r\n      </Button>\r\n    </DialogNew>\r\n  );\r\n};\r\n","import axios from \"axios\";\r\n\r\nexport const dataService = {\r\n  load: () => {\r\n    return axios\r\n      .get(\"/EPiServer/content-children-grouping/ConfigSettings/LoadConfigurations\")\r\n      .then(response => {\r\n        alert(\"loaded\");\r\n        return response;\r\n      })\r\n      .catch((error) => {\r\n        console.error(error);\r\n        return {};\r\n      });\r\n  },\r\n\r\n  save: (configurations: any[]) => {\r\n    axios\r\n      .post(\"/EPiServer/content-children-grouping/ConfigSettings/Save\", configurations)\r\n      .then((response) => {\r\n        console.log(response);\r\n      })\r\n      .catch((error) => {\r\n        console.error(error);\r\n      });\r\n  }\r\n};\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}